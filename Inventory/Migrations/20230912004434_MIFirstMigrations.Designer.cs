// <auto-generated />
using System;
using Inventory.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inventory.Migrations
{
    [DbContext(typeof(InventaryContext))]
    [Migration("20230912004434_MIFirstMigrations")]
    partial class MIFirstMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Inventory.Entity.CategoriaEntity", b =>
                {
                    b.Property<string>("CategoriaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoriaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("categoriaEntities");
                });

            modelBuilder.Entity("Inventory.Entity.InOutEntity", b =>
                {
                    b.Property<string>("InOutId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InOutDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInput")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StorageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InOutId");

                    b.HasIndex("StorageId");

                    b.ToTable("inventaryEntities");
                });

            modelBuilder.Entity("Inventory.Entity.StorageEntity", b =>
                {
                    b.Property<string>("StorageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartialQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("WherehouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StorageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WherehouseId");

                    b.ToTable("storageEntities");
                });

            modelBuilder.Entity("Inventory.Entity.WherehouseEntity", b =>
                {
                    b.Property<string>("WherehouseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WherehouseAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WherehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WherehouseId");

                    b.ToTable("wherehouseEntities");
                });

            modelBuilder.Entity("Inventory.Entity.obj.ProductEntity", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CategoriaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalQuality")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("productEntities");
                });

            modelBuilder.Entity("Inventory.Entity.InOutEntity", b =>
                {
                    b.HasOne("Inventory.Entity.StorageEntity", "Storage")
                        .WithMany("Inout")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Inventory.Entity.StorageEntity", b =>
                {
                    b.HasOne("Inventory.Entity.obj.ProductEntity", "Product")
                        .WithMany("storageEntities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Entity.WherehouseEntity", "wherehouse")
                        .WithMany("Storages")
                        .HasForeignKey("WherehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("wherehouse");
                });

            modelBuilder.Entity("Inventory.Entity.obj.ProductEntity", b =>
                {
                    b.HasOne("Inventory.Entity.CategoriaEntity", "Categoria")
                        .WithMany("Products")
                        .HasForeignKey("CategoriaId");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Inventory.Entity.CategoriaEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Inventory.Entity.StorageEntity", b =>
                {
                    b.Navigation("Inout");
                });

            modelBuilder.Entity("Inventory.Entity.WherehouseEntity", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("Inventory.Entity.obj.ProductEntity", b =>
                {
                    b.Navigation("storageEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
