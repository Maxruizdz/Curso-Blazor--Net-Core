@using Entity.obj
@using Business
@using Inventory.Entity;

<div class="form-group">
    <select class="form-control" @onchange="OnchangeWarehouse">

        <option value=""> Seleccione una bodega  </option >


        @foreach(var warehouse in wherehouseEntities)
        {
           
            <option value="@warehouse.WherehouseId">@warehouse.WherehouseName </option>
        
        
        
        
        }





    </select>






</div>

<EditForm Model="inout">
    <div class="form-group">
        <label>Producto</label>
        <InputSelect class="form-control" @bind-Value="inout.StorageId">
            <option>Seleccione producto...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Cantidad</label>
        <InputNumber class="form-control" @bind-Value="inout.Quantity" />
    </div>
    <div class="form-group">
        <label>Es una entrada</label>
        <InputCheckbox class="form-control" @bind-Value="inout.IsInput" />
    </div>
    
        <input type="button" value="@Button_value" @onclick="save" class="form-control btn btn-warning" />
    
</EditForm>
<hr />
<div class="h3 text-center">
    @message
</div>
<hr />






@code {
    InOutEntity inout = new InOutEntity();

    List<WherehouseEntity> wherehouseEntities = new List<WherehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();
    StorageEntity storage = new StorageEntity();
    ProductEntity product = new ProductEntity();
    string Button_value => inout.IsInput ? "Registrar Entrada" : "Registrar salida";


    string message = "";
    protected override async Task OnInitializedAsync()
    {
        wherehouseEntities = B_WhereHouse.Get();
    }


    private void OnchangeWarehouse(ChangeEventArgs e)
    {

        var id_warehouse = e.Value.ToString();

        storages = B_Storage.GetStorages_wherehouse(id_warehouse);



    }
    private void save()
    {

        storage = storages.FirstOrDefault(p => p.StorageId == inout.StorageId);

        product = storage.Product;

        if (inout.IsInput)
        {
            storage.PartialQuantity = storage.PartialQuantity + inout.Quantity;

            product.TotalQuality = product.TotalQuality + inout.Quantity;


            B_Storage.Update(storage);
            B_Product.Update(product);

            message = $"El producto: {product.ProductName} ha sido actualizado exitosamente!!";
        }
        else
        {
            if (IsBiggerThanzero(storage.PartialQuantity, inout.Quantity))
            {



                storage.PartialQuantity = storage.PartialQuantity - inout.Quantity;

                product.TotalQuality = product.TotalQuality - inout.Quantity;


                B_Storage.Update(storage);
                B_Product.Update(product);
                message = $"El producto: {product.ProductName} ha sido actualizado exitosamente!!";
            }
            else
            {
                
            
            
                message = $"No existe la cantidad sufiente en bodega para el producto: {product.ProductName} ";
            }

            
            }



        } 

    

    private bool IsBiggerThanzero(int storage_quantity, int inout_Quantity)
    {
        if (storage_quantity >= inout_Quantity)
        {


            return true;




    } else
        
 return false;
        

    
    
    
    }
}
